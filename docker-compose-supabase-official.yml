version: '3.8'

# 定义服务
services:
  # 数据库服务
  db:
    image: postgres:15-alpine
    container_name: supabase-db
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # REST API服务
  rest:
    image: postgrest/postgrest:v12.2.12
    container_name: supabase-rest
    ports:
      - "3000:3000"
    depends_on:
      db: 
        condition: service_healthy
    environment:
      - PGRST_LOG_QUERY=main-query
      - PGRST_LOG_LEVEL=debug
      - PGRST_DB_URI=postgres://authenticator:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - PGRST_JWT_SECRET=${JWT_SECRET}
      - PGRST_DB_SCHEMA=public,basejump,graphql_public
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_DB_USE_LEGACY_GUCS=false
      - PGRST_APP_SETTINGS_JWT_SECRET=${JWT_SECRET}
      - PGRST_APP_SETTINGS_JWT_EXP=${JWT_EXPIRY}      
    restart: unless-stopped

  # 认证服务
  auth:
    image: supabase/gotrue:v2.177.0
    container_name: supabase-auth
    ports:
      - "9999:9999"
    depends_on:
      db: 
        condition: service_healthy
    environment:
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - GOTRUE_JWT_SECRET=${JWT_SECRET}
      - GOTRUE_JWT_AUD=authenticated
      - GOTRUE_JWT_ADMIN_ROLES=service_role      
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
      - GOTRUE_JWT_DEFAULT_GROUP=authenticated      
      - GOTRUE_JWT_EXP=${JWT_EXPIRY}
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - GOTRUE_SITE_URL=${SUPABASE_URL}
      - API_EXTERNAL_URL=http://localhost:8000
    restart: unless-stopped

  # 管理界面
  studio:
    image: supabase/studio:2025.06.30-sha-6f5982d
    container_name: supabase-studio
    ports:
      - "3001:3000"
    depends_on:
      - rest
      - auth
      - kong
    environment:
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_PUBLIC_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SERVICE_ROLE_KEY}
      - AUTH_JWT_SECRET=${JWT_SECRET}
      - STUDIO_PG_META_URL=http://pg-meta:8080
    restart: unless-stopped

  # PostgreSQL元数据服务
  pg-meta:
    image: supabase/postgres-meta:v0.83.0
    container_name: supabase-pg-meta
    ports:
      - "8080:8080"
    depends_on:
      db: 
        condition: service_healthy
    environment:
      - PG_META_DB_HOST=db
      - PG_META_DB_NAME=${POSTGRES_DB}
      - PG_META_DB_USER=${POSTGRES_USER}
      - PG_META_DB_PASSWORD=${POSTGRES_PASSWORD}
      - PG_META_PORT=8080
    restart: unless-stopped

  # API网关
  kong:
    image: kong:2.8.1
    container_name: supabase-kong
    ports:
      - "8000:8000"
      - "8443:8443"
    depends_on:
      - rest
      - auth
      - pg-meta
    volumes:
      - ./kong.yml:/etc/kong/kong.yml:ro,z
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${SERVICE_ROLE_KEY}
    restart: unless-stopped

# 网络配置
networks:
  default:
    name: supabase-network
    driver: bridge

# 卷配置
volumes:
  postgres-data:
    driver: local